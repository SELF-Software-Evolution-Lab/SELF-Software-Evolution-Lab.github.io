{"componentChunkName":"component---src-components-project-js","path":"/ror_modernization","webpackCompilationHash":"a3cd80c2e2822e28298e","result":{"data":{"allMembersJson":{"edges":[{"node":{"name":"Kelly Garcés","url":"https://profesores.virtual.uniandes.edu.co/kjgarces971/es/inicio/"}},{"node":{"name":"Rubby Casallas","url":"https://profesores.virtual.uniandes.edu.co/rcasalla/es/inicio/"}},{"node":{"name":"Nicolas Cardozo","url":"https://profesores.virtual.uniandes.edu.co/ncardozo/es/inicio/"}},{"node":{"name":"Giacomo Barbieri","url":"https://uniandes.academia.edu/GiacomoBarbieri"}},{"node":{"name":"Iván Alfonso","url":null}},{"node":{"name":"José Bocanegra","url":null}},{"node":{"name":"Camilo Mendoza","url":null}},{"node":{"name":"Wilmer Rubio","url":null}},{"node":{"name":"Nicolas Robles","url":null}},{"node":{"name":"Daniel Althviz","url":null}},{"node":{"name":"Esteban Reyes","url":null}},{"node":{"name":"Andres Leon","url":null}},{"node":{"name":"Diego Prens","url":null}},{"node":{"name":"Jairo Ariza","url":null}},{"node":{"name":"Fabián Melo","url":null}},{"node":{"name":"Freddy Viera","url":null}},{"node":{"name":"Juan Manuel Soto","url":null}},{"node":{"name":"Alejandro Salamanca","url":null}},{"node":{"name":"Sandra Pinto","url":null}},{"node":{"name":"Jair Garcia","url":null}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"node":{"slug":"ror_modernization","url":null,"name":"Ruby on Rails Modernization","status":"inactive","summary":"Since functionality is often spread in hundreds of lines of code, it is hard for the developer to understand the system, which may lead to under/overestimation of the new feature cost and rework/delays in the subsequent phases of development. In this project, we present the adaptation of the general approach to support data schema as an additional input and its instrumentation in an industrial case study where the technology is Ruby on Rails.","description":"Agile Development values working software over documentation. Therefore, in maintenance stages of existing software, the source code is the sole software artifact that developers have for analyzing the viability and impact of a new user story. Since functionality is often spread in hundreds of lines of code, it is hard for the developer to understand the system, which may lead to under-/overestimation of the new feature cost and rework/delays in the subsequent phases of development. In a previous work, we proposed a Model-Driven Reverse Engineering approach for obtaining software visualizations from source code. Two case studies of comprehension of applications written in statically typed languages have shown the applicability of this approach. A recent experience with an industrial partner, where the systems are developed on dynamically typed languages, has motivated us to adapt the previous proposal to take as input not only the source code but also the application data schema to complete the information that is missing in the code, and then automatically generate more meaningful diagrams that help developers in maintenance tasks. In this project, we present the adaptation of the general approach to support data schema as an additional input and its instrumentation in an industrial case study where the technology is Ruby on Rails.","members":[0],"publications":[{"name":"García, J., & Garcés, K. (2017, August). Improving understanding of dynamically typed software developed by agile practitioners. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (pp. 908-913). ACM.","url":"https://dl.acm.org/citation.cfm?id=3117772"}],"researchLine":1,"period":"2017","industry":[{"name":"Jair García"}],"demos":null}}}}